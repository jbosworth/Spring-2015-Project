import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
	/** Code modeled from that available at http://www.javapractices.com/topic/TopicAction.do?Id=42
	 * 
	 */
	/** Assumes UTF-8 encoding. JDK 7+. */
	public class InputOutputReadWrite {

	  public static void main(String... aArgs) throws IOException {
		  System.out.println("Type input file name: ");
		  Scanner scan = new Scanner(System.in);  //"C:\\CISC275\\Test.txt"
		  String fileName = scan.nextLine(); 
		 InputOutputReadWrite parser = new InputOutputReadWrite(fileName);
		  parser.readTextFile(fileName);
	    log("Done.");
	  }
	  
	  /**
	   Constructor.
	   @param aFileName full name of an existing, readable file.
	  */
	  public InputOutputReadWrite(String aFileName) throws IOException {
	    fFilePath = Paths.get(aFileName);
	  }
	  
	  
	  /** Template method that calls {@link #processLine(String)}.  */ 
	  public final void processLineByLine() throws IOException {
	   	  try (Scanner scanner =  new Scanner(fFilePath, ENCODING.name())){
		  while (scanner.hasNextLine()){
	      processLine(scanner.nextLine());
	      }      
	    }
	  }

	  protected void processLine(String aLine){
	    //use a second Scanner to parse the content of each line 
	    Scanner scanner = new Scanner(aLine);
	    scanner.useDelimiter("=");
	    // if the following line contains text
	    if (scanner.hasNext()){
	      String name = scanner.next();
	    }
	    else {
	      log("Empty or invalid line. Unable to process.");
	    }
	  }

	private void readTextFile(String aFileName) throws IOException {
	  Path path = Paths.get(aFileName);
	  InputOutputReadWrite parser = new InputOutputReadWrite(aFileName);
	  System.out.println("Type output file name: ");
	  Scanner scan = new Scanner(System.in);
	  String outputFile = scan.nextLine();  //"C:\\CISC275\\TestOutput.txt"
	  List<String> lines = new ArrayList<String>();
	  int count = 0;
	  
	  try (Scanner scanner =  new Scanner(path, ENCODING.name())){
	    while (scanner.hasNextLine()){
	      //process each line in some way
	    	count++;
	    	String question = scanner.nextLine();
	    	log(question);
	      System.out.println("Your answer: ");
	      String answer = scan.nextLine(); 
		
	      if (scanner.hasNextLine()) {
	    	  String correctAnswer = scanner.nextLine();
	    	  if (answer.equals(correctAnswer)) {
	    	    lines.add(count + ": " + question + " Correct answer: " + answer + "."); 
	    		System.out.println("Correct!"); 
	    	  }
	    	  else {
	    		  lines.add(count + ": " + question + " Incorrect answer; " + "answer given: " + answer +
	    				  ". Correct answer: " + correctAnswer + ".");
	    		  System.out.println("Incorrect");
	    	  }
	      }
	    }      
	  }
	  Arrays.asList(lines);
	  parser.writeLargerTextFile(outputFile,lines);
	}

	private void readTextFileAlternate(String aFileName) throws IOException {
	  Path path = Paths.get(aFileName);
	  try (BufferedReader reader = Files.newBufferedReader(path, ENCODING)){
	    String line = null;
	    while ((line = reader.readLine()) != null) {
	      //process each line in some way
	      log(line);
	    }      
	  }
	}

	private void writeLargerTextFile(String aFileName, List<String> aLines) throws IOException {
	  Path path = Paths.get(aFileName);
		  
	  try (BufferedWriter writer = Files.newBufferedWriter(path, ENCODING)){
	   
		  for(String line : aLines){
	      processLine(line);
	    	writer.write(line);
	      writer.newLine();
	    }
	  }
	}  
	  // PRIVATE 
	  private final Path fFilePath;
	  private final static Charset ENCODING = StandardCharsets.UTF_8;  
	  
	  private static void log(Object aObject){
	    System.out.println(String.valueOf(aObject));
	  }
	  
	  private String quote(String aText){
	    String QUOTE = "'";
	    return QUOTE + aText + QUOTE;
	  }
	

}
